(()=>{"use strict";var __webpack_modules__={9244:(e,t,s)=>{s.d(t,{Z:()=>r});const r=class{#e={};constructor(e){this.promise=e}setRequest(e,t,...s){e in this.#e?this.#e[e].then(t):(this.#e[e]=this.promise(e,...s),this.#e[e].then((s=>{delete this.#e[e],t(s)})))}}}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var s=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](s,s.exports,__webpack_require__),s.exports}__webpack_require__.d=(e,t)=>{for(var s in t)__webpack_require__.o(t,s)&&!__webpack_require__.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__={};(()=>{var _handlerRequests__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(9244);const cache=localStorage.getItem("svg-cache")?JSON.parse(localStorage.getItem("svg-cache")):{},handlerRequests=new _handlerRequests__WEBPACK_IMPORTED_MODULE_0__.Z(getSVG);let isConnected=!1,isLoadSVG=!1,isErrorSVG=!1;class SvgLoader extends HTMLElement{#t=()=>{};#s=()=>{};constructor(){super(),this.attachShadow({mode:"open"}),this.svg=document.createElement("svg"),this.shadowRoot.appendChild(this.svg)}#r(e){if(e)return e in cache?this.#c(cache[e]):void handlerRequests.setRequest(e,this.#c.bind(this))}#c(svgTxt){const scriptRegex=/<script>(.|\n|\r)*<\/script>/g;this.shadowRoot.innerHTML=svgTxt.replace(scriptRegex,""),this.svg=this.shadowRoot.querySelector("svg");let svgScript=svgTxt.match(scriptRegex);if(svgScript){svgScript=svgScript[0].replace(/<\/?script>/g,"");try{eval(`"use strict";\r\n${svgScript}`)}catch(e){return console.error(e),this.#s(e),void(isErrorSVG=!0)}}this.#t(this.svg),isLoadSVG=!0}static get observedAttributes(){return["src"]}attributeChangedCallback(e,t,s){if("src"===e)this.#r(s)}connectedCallback(){this.src&&this.setAttribute("src",this.src),this.style.cssText+="\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    ",isConnected=!0}disconnectedCallback(){isConnected=!1}set src(e){isConnected?this.setAttribute("src",e):this.#r(e)}set onLoadSvg(e){isLoadSVG&&e(this.svg),this.#t=e}set onErrorSvg(e){isErrorSVG&&e(this.svg),this.#s=e}}async function getSVG(e){let t;try{t=await(await fetch(e,{mode:"cors"})).text(),cache[e]=t}catch(e){throw console.error(e),new Error(e)}return localStorage.setItem("svg-cache",JSON.stringify(cache)),t}customElements.define("svg-loader",SvgLoader)})()})();